version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2 

jobs:
  build:
    docker:
      - image: circleci/ruby:2.6.3-stretch-node
    executor: ruby/default
    steps:
      - checkout
      - run:
          name: Which bundler?
          command: bundle -v
      - ruby/bundle-install
      description: >
  Install Mozilla's Firefox browser, for use in browser testing. Requires
  apt-get, gpg, curl, sha256sum, tar, jq
parameters:
  install-dir:
    default: /usr/local/bin
    description: |
      Directory in which to install Firefox
    type: string
  version:
    default: latest
    description: >
      Version of Firefox to install, defaults to the latest stable release. To
      install an older release, specify a full semantic version number, ESR or
      otherwise, e.g., 66.0.3, 52.0.1esr, 53.0, etc.
    type: string
steps:
  - run:
      command: >
        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi



        # FUNCTIONS

        grab_firefox_version () {
          if [[ "<<parameters.version>>" == "latest" ]]; then
            # extract latest version from mozilla product details API

            FIREFOX_VERSION_STRING=$(curl \
              https://product-details.mozilla.org/1.0/firefox_versions.json | \
              jq '.LATEST_FIREFOX_VERSION')

            # strip leading/trailing "
            temp="${FIREFOX_VERSION_STRING%\"}"
            FIREFOX_VERSION="${temp#\"}"
            echo "Latest stable version of Firefox is $FIREFOX_VERSION"
          else
            FIREFOX_VERSION="<<parameters.version>>"
            echo "Selected version of Firefox is $FIREFOX_VERSION"
          fi

          # create Firefox download URL base
          FIREFOX_URL_BASE="https://archive.mozilla.org/pub/firefox/releases/$FIREFOX_VERSION"
        }


        installation_check () {
          if command -v firefox > /dev/null 2>&1; then
            if firefox --version | grep "$FIREFOX_VERSION" > /dev/null 2>&1; then
              echo "firefox $FIREFOX_VERSION is already installed"
              exit 0
            else
              echo "A different version of Firefox is installed ($(firefox --version)); removing it"
              $SUDO rm -f $(command -v firefox)
            fi
          fi
        }


        # mac: setup version, install packages, then continue

        if uname -a | grep Darwin> /dev/null 2>&1; then
          echo "System detected as MacOS"
          grab_firefox_version
          installation_check
          HOMEBREW_NO_AUTO_UPDATE=1 brew install gnupg coreutils > /dev/null 2>&1
        # deb/ubuntu/other linux: setup version, install packages, then continue

        else
          echo "System detected as Linux"
          grab_firefox_version
          installation_check

          if command -v yum > /dev/null 2>&1; then
            $SUDO yum install -y \
              alsa-lib \
              bzip2 \
              dbus-glib-devel \
              gtk2-devel \
              gtk3-devel \
              libXt-devel \
              perl \
              which \
              > /dev/null 2>&1
          else
            $SUDO apt-get update > /dev/null 2>&1 && \
              $SUDO apt-get install -y libxt6 libgtk-3-dev libdbus-glib-1-2 > /dev/null 2>&1
          fi
        fi


        # import public key

        curl --silent --show-error --location --fail --retry 3
        "$FIREFOX_URL_BASE/KEY" | gpg --import > /dev/null 2>&1


        # download shasums

        curl -O --silent --show-error --location --fail --retry 3
        "$FIREFOX_URL_BASE/SHA256SUMS.asc" || curl -O --silent --show-error
        --location --fail --retry 3 "$FIREFOX_URL_BASE/SHA512SUMS.asc"

        curl -O --silent --show-error --location --fail --retry 3
        "$FIREFOX_URL_BASE/SHA256SUMS" || curl -O --silent --show-error
        --location --fail --retry 3 "$FIREFOX_URL_BASE/SHA512SUMS"


        # verify shasums

        gpg --verify SHA256SUMS.asc SHA256SUMS || gpg --verify SHA512SUMS.asc
        SHA512SUMS

        rm -f SHA256SUMS.asc || rm -f SHA512SUMS.asc


        # setup firefox download

        if uname -a | grep Darwin > /dev/null 2>&1; then
          FIREFOX_FILE="Firefox%20$FIREFOX_VERSION"
          PLATFORM=mac
          FILE_EXT=dmg
        else
          FIREFOX_FILE="firefox-$FIREFOX_VERSION"
          PLATFORM=linux-x86_64
          FILE_EXT=tar.bz2
        fi


        FIREFOX_FILE_LOCATION="$PLATFORM/en-US/$FIREFOX_FILE"


        FIREFOX_FILE_NAME="$PLATFORM-en-US-$FIREFOX_FILE"


        # download firefox

        curl --silent --show-error --location --fail --retry 3 \
          --output "$FIREFOX_FILE_NAME.$FILE_EXT" \
          "$FIREFOX_URL_BASE/$FIREFOX_FILE_LOCATION.$FILE_EXT"

        if uname -a | grep Darwin > /dev/null 2>&1; then
          echo "No PGP data for macOS Firefox releases; skipping PGP verification"

          perl -i -pe "s&mac/en-US/Firefox $FIREFOX_VERSION&mac-en-US-Firefox%20$FIREFOX_VERSION&g" SHA256SUMS
          perl -i -pe "s&mac/en-US/Firefox $FIREFOX_VERSION&mac-en-US-Firefox%20$FIREFOX_VERSION&g" SHA512SUMS
        else
          # only do this step if .asc file exists for this version
          if [[ $(curl --silent --location --fail --retry 3 \
            "$FIREFOX_URL_BASE/$FIREFOX_FILE_LOCATION.$FILE_EXT.asc") ]]; then

            curl --silent --show-error --location --fail --retry 3 \
              --output "$FIREFOX_FILE_NAME.$FILE_EXT.asc" \
              "$FIREFOX_URL_BASE/$FIREFOX_FILE_LOCATION.$FILE_EXT.asc"

            # verify download archive
            gpg --verify "$FIREFOX_FILE_NAME.$FILE_EXT.asc" "$FIREFOX_FILE_NAME.$FILE_EXT"
            rm -f "$FIREFOX_FILE_NAME.$FILE_EXT.asc"
          fi

          perl -i -pe "s%linux-x86_64/en-US/firefox%linux-x86_64-en-US-firefox%g" SHA256SUMS
          perl -i -pe "s%linux-x86_64/en-US/firefox%linux-x86_64-en-US-firefox%g" SHA512SUMS
        fi


        grep "$FIREFOX_FILE_NAME.$FILE_EXT" SHA256SUMS | sha256sum -c - || \
          grep "$FIREFOX_FILE_NAME.$FILE_EXT" SHA512SUMS | sha512sum -c -
        rm -f SHA256SUMS || rm -f SHA512SUMS


        # setup firefox installation

        if uname -a | grep Darwin > /dev/null 2>&1; then
          hdiutil attach "$FIREFOX_FILE_NAME.$FILE_EXT" > /dev/null 2>&1
          $SUDO cp -R /Volumes/Firefox/Firefox.app /Applications

          hdiutil eject /Volumes/Firefox > /dev/null 2>&1
          $SUDO rm -f "$FIREFOX_FILE_NAME.$FILE_EXT"

          echo -e "#\!/bin/bash\n" > firefox
          perl -i -pe "s|#\\\|#|g" firefox
          echo -e "/Applications/Firefox.app/Contents/MacOS/firefox \"\$@\"" >> firefox

          $SUDO mv firefox <<parameters.install-dir>>
          $SUDO chmod +x <<parameters.install-dir>>/firefox

          # test/verify version
          if firefox --version | grep "$FIREFOX_VERSION" > /dev/null 2>&1; then
            echo "$(firefox --version) has been installed in the /Applications directory"
            echo "A shortcut has also been created at $(which firefox)"
          else
            echo "Something went wrong; the specified version of Firefox could not be installed"
            exit 1
          fi

        else
          $SUDO tar -xjf "$FIREFOX_FILE_NAME.$FILE_EXT"
          $SUDO rm -f "$FIREFOX_FILE_NAME.$FILE_EXT"
          $SUDO mv firefox "<<parameters.install-dir>>/firefox-$FIREFOX_VERSION"
          $SUDO chmod +x "<<parameters.install-dir>>/firefox-$FIREFOX_VERSION/firefox"
          $SUDO ln -s "<<parameters.install-dir>>/firefox-$FIREFOX_VERSION/firefox" /usr/local/bin/firefox

          # test/verify version
          if echo "$(firefox --version)esr" | grep "$FIREFOX_VERSION" > /dev/null 2>&1; then
            echo "$(firefox --version) has been installed to $(which firefox)"
          else
            echo "Something went wrong; the specified version of Firefox could not be installed"
            exit 1
          fi
        fi
      name: Install Firefox
      description: >
  Install Mozilla's Geckodriver WebDriver proxy, for use in browser testing with
  Firefox. Requirements: curl, tar
parameters:
  install-dir:
    default: /usr/local/bin
    description: |
      Directory in which to install Geckodriver
    type: string
  version:
    default: latest
    description: >
      Version of Geckodriver to install, defaults to latest release. To install
      an older release, specify a full semantic version tag, e.g., `v0.23.0`.
      For a list of releases, and a Firefox/Geckodriver version compatibility
      table, see the following links:
      https://github.com/mozilla/geckodriver/releases
      https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html
    type: string
steps:
  - run:
      command: >
        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi


        # FUNCTIONS

        grab_geckodriver_version () {
          if [[ "<<parameters.version>>" == "latest" ]]; then
            # extract latest version from github releases API
            GECKODRIVER_VERSION_STRING=$(curl -Ls -o /dev/null -w "%{url_effective}\n" "https://github.com/mozilla/geckodriver/releases/latest" | sed 's:.*/::')

            # strip leading/trailing "
            temp="${GECKODRIVER_VERSION_STRING%\"}"
            GECKODRIVER_VERSION="${temp#\"}"
          else
            GECKODRIVER_VERSION="<<parameters.version>>"
          fi

          echo "Selected version of Geckodriver is: $GECKODRIVER_VERSION"
        }


        installation_check () {
          if command -v geckodriver >> /dev/null 2>&1; then
            if geckodriver --version | grep "$GECKODRIVER_VERSION" >> /dev/null 2>&1; then
              echo "Geckodriver $GECKODRIVER_VERSION is already installed"
              exit 0
            else
              echo "A different version of Geckodriver is installed ($(geckodriver --version)); removing it"
              $SUDO rm -f $(command -v geckodriver)
            fi
          else
            echo "Geckodriver is not currently installed; installing it"
          fi
        }


        grab_geckodriver_version

        installation_check


        if uname -a | grep Darwin >> /dev/null 2>&1; then
          PLATFORM=macos
        else
          PLATFORM=linux64
        fi


        # get download URL

        GECKODRIVER_URL="https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-$PLATFORM.tar.gz"


        # download geckodriver

        curl --silent --show-error --location --fail --retry 3 \
          --output "geckodriver-$GECKODRIVER_VERSION-$PLATFORM.tar.gz" \
          "$GECKODRIVER_URL"

        # setup geckodriver installation

        tar xf "geckodriver-$GECKODRIVER_VERSION-$PLATFORM.tar.gz"

        rm -rf "geckodriver-$GECKODRIVER_VERSION-$PLATFORM.tar.gz"


        $SUDO mv geckodriver <<parameters.install-dir>>

        $SUDO chmod +x <<parameters.install-dir>>/geckodriver


        # verify version

        echo "Geckodriver has been installed to $(which geckodriver)"

        geckodriver --version


        # test/verify version


        GECKODRIVER_VERSION_NUM="$(echo $GECKODRIVER_VERSION | sed -E 's/v//')"


        if geckodriver --version | grep "$GECKODRIVER_VERSION_NUM" > /dev/null
        2>&1; then
          echo "$(geckodriver --version) has been installed to $(which geckodriver)"
        else
          echo "Something went wrong; the specified version of Geckodriver could not be installed"
          exit 1
        fi
      name: Install Geckodriver
      
      
      - run:
          name: Run rspec
          command: bundle exec rspec blog-test.rb
      


  
